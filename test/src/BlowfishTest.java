import org.junit.Test;

import java.nio.ByteBuffer;

import static junit.framework.Assert.assertEquals;

/**
 * Created by Stephen Yingling on 4/12/14.
 */
public class BlowfishTest {

    protected static long[] TEST_VECTORS = {
 0x0000000000000000L, 0x0000000000000000L, 0x4EF997456198DD78L,
 0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL, 0x51866FD5B85ECB8AL,
 0x3000000000000000L, 0x1000000000000001L, 0x7D856F9A613063F2L,
 0x1111111111111111L, 0x1111111111111111L, 0x2466DD878B963C9DL,
 0x0123456789ABCDEFL, 0x1111111111111111L, 0x61F9C3802281B096L,
 0x1111111111111111L, 0x0123456789ABCDEFL, 0x7D0CC630AFDA1EC7L,
 0x0000000000000000L, 0x0000000000000000L, 0x4EF997456198DD78L,
 0xFEDCBA9876543210L, 0x0123456789ABCDEFL, 0x0ACEAB0FC6A0A28DL,
 0x7CA110454A1A6E57L, 0x01A1D6D039776742L, 0x59C68245EB05282BL,
 0x0131D9619DC1376EL, 0x5CD54CA83DEF57DAL, 0xB1B8CC0B250F09A0L,
 0x07A1133E4A0B2686L, 0x0248D43806F67172L, 0x1730E5778BEA1DA4L,
 0x3849674C2602319EL, 0x51454B582DDF440AL, 0xA25E7856CF2651EBL,
 0x04B915BA43FEB5B6L, 0x42FD443059577FA2L, 0x353882B109CE8F1AL,
 0x0113B970FD34F2CEL, 0x059B5E0851CF143AL, 0x48F4D0884C379918L,
 0x0170F175468FB5E6L, 0x0756D8E0774761D2L, 0x432193B78951FC98L,
 0x43297FAD38E373FEL, 0x762514B829BF486AL, 0x13F04154D69D1AE5L,
 0x07A7137045DA2A16L, 0x3BDD119049372802L, 0x2EEDDA93FFD39C79L,
 0x04689104C2FD3B2FL, 0x26955F6835AF609AL, 0xD887E0393C2DA6E3L,
 0x37D06BB516CB7546L, 0x164D5E404F275232L, 0x5F99D04F5B163969L,
 0x1F08260D1AC2465EL, 0x6B056E18759F5CCAL, 0x4A057A3B24D3977BL,
 0x584023641ABA6176L, 0x004BD6EF09176062L, 0x452031C1E4FADA8EL,
 0x025816164629B007L, 0x480D39006EE762F2L, 0x7555AE39F59B87BDL,
 0x49793EBC79B3258FL, 0x437540C8698F3CFAL, 0x53C55F9CB49FC019L,
 0x4FB05E1515AB73A7L, 0x072D43A077075292L, 0x7A8E7BFA937E89A3L,
 0x49E95D6D4CA229BFL, 0x02FE55778117F12AL, 0xCF9C5D7A4986ADB5L,
 0x018310DC409B26D6L, 0x1D9D5C5018F728C2L, 0xD1ABB290658BC778L,
 0x1C587F1C13924FEFL, 0x305532286D6F295AL, 0x55CB3774D13EF201L,
 0x0101010101010101L, 0x0123456789ABCDEFL, 0xFA34EC4847B268B2L,
 0x1F1F1F1F0E0E0E0EL, 0x0123456789ABCDEFL, 0xA790795108EA3CAEL,
 0xE0FEE0FEF1FEF1FEL, 0x0123456789ABCDEFL, 0xC39E072D9FAC631DL,
 0x0000000000000000L, 0xFFFFFFFFFFFFFFFFL, 0x014933E0CDAFF6E4L,
 0xFFFFFFFFFFFFFFFFL, 0x0000000000000000L, 0xF21E9A77B71C49BCL,
 0x0123456789ABCDEFL, 0x0000000000000000L, 0x245946885754369AL,
 0xFEDCBA9876543210L, 0xFFFFFFFFFFFFFFFFL, 0x6B5C5A9C5D9E0A5AL};
    
    @Test
    public void testEncrypt(){
        Blowfish b = new Blowfish();

        for(int i=0; (i+2)<TEST_VECTORS.length; i+=3){

            byte[] key = ByteBuffer.allocate(8).putLong(TEST_VECTORS[i]).array();
            b.setKey(key);
            long result = b.encrypt(TEST_VECTORS[i+1]);

            assertEquals(TEST_VECTORS[i+2],result);
        }
    }

    public void testEncryptWithKeyRollover(){
        Blowfish b = new Blowfish();

        byte[] key = {0x01};
        b.setKey(key);
        long test = b.encrypt(0x0123456789ABCDEFL);
        assertEquals(0xFA34EC4847B268B2L,test);

        key = ByteBuffer.allocate(2).putInt(0x0101).array();

        b.setKey(key);
        test = b.encrypt(0x0123456789ABCDEFL);
        assertEquals(0xFA34EC4847B268B2L,test);

        key = ByteBuffer.allocate(3).putInt(0x010101).array();

        b.setKey(key);
        test = b.encrypt(0x0123456789ABCDEFL);
        assertEquals(0xFA34EC4847B268B2L,test);
    }


}
